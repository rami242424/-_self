<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Scope & 콜백함수</title>
</head>
<body>
    <script>
        9.4 자바스크립트 Scope
        스코프란 변수의 접근성과 생존 기간을 제어하는 ‘생존 범위’를 의미합니다.
        const func1 = function(){
        var a = 1;
            var b = 2;
    
        console.log(a + b);
        };

        var a = 20;

        func1();
        //3
        // -> `var` 키워드를 이용해서 전역변수를 선언해 봤습니다. 
        // 변수 a는 어디서든 접근 가능한 전역 변수임에도 불구하고 함수안의 a 와 함수 밖의 a는 완전히 별개의 변수임을 알 수 있습니다.
        // 그리고 함수안의 a변수는 함수가 종료면 함수 스코프가 가비지 컬랙션으로 수거되기 때문에, 메모리상에서 자동으로 제거됩니다.
        // 스코프는 이름이 충돌하는 문제를 덜어주고, 자동으로 메모리를 관리합니다.

        **스코프의 종류**
        1. 전역 스코프
            - 스크립트의 '어디서든' 접근이 가능하기 때문에 사용이 쉽습니다.
            - 타인과의 협업, 라이브러리 사용시 충돌의 가능성이 있습니다.
        2. 함수 스코프
            - 함수 내부에서 정의된 변수와 매개변수는 함수 외부에서 접근 할 수 없습니다.
            - 함수 내부에서 정의된 변수라면 함수의 어느 부분에서도 접근 할 수 있습니다. ??
        3. 블록 스코프 (ES6)
            - 중괄호 안에서만 접근 가능합니다.
            - 블록 내부에 정의된 변수는 블록의 실행이 끝나면 해제됩니다.
        // ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ //
        let z = 100;
        function sum(x){ // x는 매개변수(parameter)이면서 지역변수(local val)
        let y = 50; // y는 지역변수
        z = z + y;
        return x + y;
        }
        console.log(sum(10)); // 10은 전달인자(argument)
        // 60
        console.log(x);
        // x is not defined
        console.log(y);
        // y is not defined
        console.log(z);
        // 100

        // 키워드로 인해 전역, 지역이 갈리는 것은 아닌지, let, var, const 모두 테스트 해보세요.[X]
        // ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ //

        // <블록 레벨 스코프>
        if(true){ // for문이어도 마찬가지입니다.
            let x = 10;
            const y = 10;
        }
        console.log(x, y)
        // x, y is not defined
        // {}블록 안에 선언 된 것은 밖에서 출력 안됨


        // <밖에 선언된 x는 함수 내부에서도 접근 가능합니다.>
        let x = 100
        function xplus(){
            x = x + 10
        }
        xplus()
        console.log(x)
        // 110

        
        // <함수가 종료된 다음에는 선언된 변수는 휘발됩니다.>
        function xplus(){
            let a = 100
            a = a + 10
        }
        xplus()
        console.log(a)
        // Error


        // <함수 안에 함수>
        function a(){
            console.log('a 실행')
            function b(){
                console.log('b 실행')
            }
            b()
        }

        a() // a실행 b실행
        b() // Error 

        // ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ //
        //예제1 ** 이해잘안감
        let a = 10;
        function outer() {
            let b = 20;

            function inner() {
                let c = 30;
                console.log(a, b, c);
            }
            inner();
            console.log(a, b);
        }
        outer();
        console.log(a);
        // 10 20 30
        // 10 20
        // 10

        // ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ //
        9.5 콜백함수
        콜백함수란 함수에 매개변수로 전달되어 실행되는 함수를 의미합니다.

        function sum(x, y, 콜백함수){
            콜백함수(x + y);
            return x + y;
            }
        function documentWriter(s){
            document.write('콜백함수', s);
            }

        sum(10, 20, documentWriter);
        // console : 30, document.write : 콜백함수30


        // map 의 사용을 통한 콜백함수
        let arr = [1, 2, 3, 4, 5];
            arr.map(제곱)
        function 제곱(x){
            return x ** 2
            }
        arr.map(x => x ** 2)
        // [1, 4, 9, 16, 25]


        //  forEach의 사용을 통한 콜백함수
        let arr = [1, 2, 3, 4, 5];
            arr.forEach(e => console.log(e**2));

        function 제곱(x){
            console.log(x**2)
            }
        // 1
        // 4
        // 9
        // 16
        // 25

    </script>
</body>
</html>